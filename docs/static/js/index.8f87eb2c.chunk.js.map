{"version":3,"sources":["webpack:///./src/index.js","webpack:///./examples/index.js","webpack:///./examples/Demo.js","webpack:///./examples/DemoList.js","webpack:///./examples/demos/demo1.js","webpack:///./src/Form.js","webpack:///./src/utils.js","webpack:///./src/FormItem.js","webpack:///./src/NativeInput.js","webpack:///./src/useForm.js","webpack:///./src/useFormItem.js","webpack:///./examples/demos/Demo2.js","webpack:///./src/FormContext.js","webpack:///./src/FormItemContext.js"],"names":["Form","Item","FormItem","NativeInput","Context","FormContext","ItemContext","FormItemContext","ReactDOM","render","document","getElementById","Demo","Component","current","DemoList","onDemoChange","item","e","this","setState","state","className","map","i","onClick","bind","label","component","Demo1","Demo2","FormItemField","type","children","resetProps","requiredMessage","style","marginBottom","DEMO","formValue","username","password","password2","email","preventDefault","form","cleanErrors","validateAndScroll","errors","console","log","position","color","top","isValidating","getError","labelWidth","getDefaultFieldValue","ref","onChange","onSubmit","renderFieldExtra","required","validateDelay","labelPosition","name","validator","value","Promise","resolve","reject","setTimeout","reset","noop","React","formError","validatingFields","props","defaultFormValue","nextProps","prevState","addField","field","fields","push","removeField","idx","indexOf","splice","getValue","path2obj","undefined","setValue","cb","nextFormValue","_validateCb","setValues","obj","Object","keys","forEach","componentDidUpdate","validateProcess","componentWillUnmount","hasError","cleanError","setError","message","setErrors","getFieldValidator","fieldValidators","filter","fieldProps","unshift","isEmptyValue","Array","isArray","validators","v","isFieldValidating","some","key","_validateField","callback","length","startCheck","error","Error","shift","ret","then","validateField","asyncTestDelay","asyncTimer","clearTimeout","validate","allErrors","validCounter","updateFormState","complete","hasUpdate","isAsyncValidate","dom","getDOM","scrollIntoView","getFormContext","create","prefixCls","Provider","PropTypes","string","object","bool","func","number","validateTrigger","oneOf","node","oneOfType","labelStyle","labelClassName","controlStyle","controlClassName","clearErrorOnFocus","inline","getInputProps","deferred","promise","constructor","args","super","_dom","hasValidateTrigger","triggerValidate","getProp","_validateTimer","context","getForm","triggers","getValidateDelay","normalizeChildrenProps","normalize","onFocus","onBlur","customProps","getFormProps","handleChange","handleFocus","handleBlur","normalizeChildren","cloneElement","Children","only","prop","defaultValue","formProps","getFormItemContext","renderExtra","child","saveDOM","htmlFor","width","renderControlExtra","isRequired","labelFor","array","inputRef","others","target","useContext","Input","height","padding","info","gender","getRules","help","size","parseInt","alignItems","JSON","stringify","createContext"],"mappings":"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","file":"static/js/index.8f87eb2c.chunk.js","sourcesContent":["import Form from \"./Form\";\r\nimport FormItem from \"./FormItem\";\r\nimport NativeInput from \"./NativeInput\";\r\nimport FormContext from \"./FormContext\";\r\nimport FormItemContext from \"./FormItemContext\";\r\nimport useForm from \"./useForm\";\r\nimport useFormItem from \"./useFormItem\";\r\n\r\nexport {\r\n    Form,\r\n    FormItem,\r\n    NativeInput,\r\n    FormContext,\r\n    FormItemContext,\r\n    useForm,\r\n    useFormItem\r\n};\r\n\r\nForm.Item = FormItem;\r\nForm.NativeInput = NativeInput;\r\nForm.Context = FormContext;\r\nForm.ItemContext = FormItemContext;\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"react-widget-base-css/lib/index.css\";\r\nimport \"react-widget-input/lib/style/index.css\";\r\nimport \"react-widget-icon/lib/style/index.css\";\r\nimport \"./style/index.scss\";\r\nimport \"./style/animate.scss\";\r\n\r\nimport \"../src/style/index.scss\";\r\n\r\nimport Demo from \"./Demo\";\r\n\r\nReactDOM.render(<Demo />, document.getElementById(\"demo\"));\r\n","import React, { Component } from 'react';\r\nimport DemoList from './DemoList';\r\n\r\nexport default class Demo extends Component {\r\n\r\n    state = {\r\n        current: DemoList[0]\r\n    }\r\n\r\n    onDemoChange(item, e) {\r\n        this.setState({\r\n            current: item\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { current } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"slider\">\r\n                    {\r\n                        DemoList.map((item, i) => {\r\n                            return (\r\n                                <div\r\n                                    className={current === item ? 'active' : ''}\r\n                                    onClick={this.onDemoChange.bind(this, item)}\r\n                                >\r\n                                    {item.label}\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className=\"content\">\r\n                    {current ? <current.component /> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import Demo1 from \"./demos/demo1\";\r\nimport Demo2 from \"./demos/Demo2\";\r\n// import Demo3 from './demos/Demo3';\r\n// import Demo4 from './demos/Demo4';\r\n\r\nexport default [\r\n    {\r\n        label: \"基本功能1\",\r\n        component: Demo1\r\n    },\r\n    {\r\n        label: \"基本功能2\",\r\n        component: Demo2\r\n    }\r\n];\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Form, FormItem, NativeInput } from \"../../src/index\";\r\n\r\nfunction FormItemField({\r\n    type = \"text\",\r\n    component = \"input\",\r\n    children,\r\n    ...resetProps\r\n}) {\r\n    return (\r\n        <FormItem\r\n            {...resetProps}\r\n            requiredMessage=\"不能为空\"\r\n            style={{\r\n                marginBottom: 24\r\n            }}\r\n        >\r\n            <NativeInput\r\n                component={component}\r\n                type={type}\r\n                children={children}\r\n            />\r\n        </FormItem>\r\n    );\r\n}\r\n\r\nexport default class DEMO extends Component {\r\n    state = {\r\n        formValue: {\r\n            username: \"\",\r\n            password: \"\",\r\n            password2: \"\",\r\n            email: \"\"\r\n        }\r\n    };\r\n\r\n    reset = e => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            formValue: {\r\n                username: \"\",\r\n                password: \"\",\r\n                password2: \"\",\r\n                email: \"\"\r\n            }\r\n        });\r\n\r\n        this.form.cleanErrors();\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (this.form) {\r\n            this.form.validateAndScroll(errors => {\r\n                console.log(errors);\r\n            });\r\n        }\r\n    };\r\n\r\n    renderFieldExtra = component => {\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    color: \"red\",\r\n                    top: \"100%\"\r\n                }}\r\n            >\r\n                {component.isValidating() ? \"校验中...\" : component.getError()}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const { formValue } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Form\r\n                    labelWidth={80}\r\n                    getDefaultFieldValue={() => \"\"}\r\n                    ref={form => (this.form = form)}\r\n                    formValue={formValue}\r\n                    onChange={formValue => this.setState({ formValue })}\r\n                    onSubmit={this.onSubmit}\r\n                    renderFieldExtra={this.renderFieldExtra}\r\n                >\r\n                    {form => {\r\n                        return (\r\n                            <div>\r\n                                <FormItemField\r\n                                    required\r\n                                    validateDelay={200}\r\n                                    labelPosition=\"top\"\r\n                                    name=\"A1\"\r\n                                    label=\"A1:\"\r\n                                />\r\n                                <FormItemField\r\n                                    required\r\n                                    name=\"username\"\r\n                                    label=\"用户名:\"\r\n                                />\r\n                                <FormItemField\r\n                                    required\r\n                                    name=\"password\"\r\n                                    label=\"登录密码:\"\r\n                                />\r\n                                <FormItemField\r\n                                    required\r\n                                    name=\"password2\"\r\n                                    label=\"密码确认:\"\r\n                                />\r\n                                <FormItemField\r\n                                    required\r\n                                    name=\"email\"\r\n                                    label=\"邮箱地址:\"\r\n                                    validator={value => {\r\n                                        return new Promise(\r\n                                            (resolve, reject) => {\r\n                                                setTimeout(resolve, 2000);\r\n                                            }\r\n                                        );\r\n                                    }}\r\n                                />\r\n                                <button>submit</button>\r\n                                <button onClick={this.reset}>reset</button>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\nimport set from \"lodash/set\";\r\nimport get from \"lodash/get\";\r\nimport FormContext from \"./FormContext\";\r\nimport { isEmptyValue, deferred } from \"./utils\";\r\n\r\nfunction noop() {}\r\n\r\nexport default class Form extends React.Component {\r\n    static propTypes = {\r\n        prefixCls: PropTypes.string,\r\n        className: PropTypes.string,\r\n        style: PropTypes.object,\r\n        path2obj: PropTypes.bool,\r\n        defaultFormValue: PropTypes.object,\r\n        getDefaultFieldValue: PropTypes.func,\r\n        renderFieldExtra: PropTypes.func,\r\n        formValue: PropTypes.object,\r\n        validators: PropTypes.object,\r\n        validateDelay: PropTypes.number,\r\n        validateTrigger: PropTypes.oneOf([\"blur\", \"change\"]),\r\n        asyncTestDelay: PropTypes.number,\r\n        component: PropTypes.node,\r\n        labelWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n        labelStyle: PropTypes.object,\r\n        labelClassName: PropTypes.string,\r\n        labelPosition: PropTypes.oneOf([\"top\", \"left\"]),\r\n        controlStyle: PropTypes.object,\r\n        controlClassName: PropTypes.string,\r\n        clearErrorOnFocus: PropTypes.bool,\r\n        inline: PropTypes.bool,\r\n        onSubmit: PropTypes.func,\r\n        onChange: PropTypes.func,\r\n        getInputProps: PropTypes.func\r\n    };\r\n\r\n    static defaultProps = {\r\n        prefixCls: \"nex-form\",\r\n        className: \"\",\r\n        style: {},\r\n        validators: {},\r\n        path2obj: true,\r\n        component: \"form\",\r\n        asyncTestDelay: 100,\r\n        validateDelay: 0,\r\n        validateTrigger: \"blur\",\r\n        labelPosition: \"left\",\r\n        clearErrorOnFocus: true,\r\n        inline: false\r\n    };\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        return {\r\n            formValue: nextProps.formValue || prevState.formValue\r\n        };\r\n    }\r\n\r\n    fields = [];\r\n    _validateCb = [];\r\n\r\n    state = {\r\n        formError: {},\r\n        validatingFields: {},\r\n        formValue: this.props.defaultFormValue || {}\r\n    };\r\n\r\n    addField(field) {\r\n        this.fields.push(field);\r\n    }\r\n\r\n    removeField(field) {\r\n        var idx = this.fields.indexOf(field);\r\n        if (idx !== -1) {\r\n            const name = field.props.name;\r\n\r\n            this.state.formError[name] = null;\r\n\r\n            this.fields.splice(idx, 1);\r\n        }\r\n    }\r\n\r\n    getValue(name) {\r\n        const { getDefaultFieldValue } = this.props;\r\n        const path2obj = this.props.path2obj;\r\n        const formValue = this.state.formValue;\r\n\r\n        const value = path2obj ? get(formValue, name) : formValue[name];\r\n\r\n        return value === undefined && getDefaultFieldValue\r\n            ? getDefaultFieldValue(name)\r\n            : value;\r\n    }\r\n\r\n    setValue(name, value, cb) {\r\n        const { path2obj, onChange } = this.props;\r\n        const formValue = this.state.formValue;\r\n        // const defer = deferred();\r\n\r\n        // TODO: 后面再考虑下特殊场景\r\n        const nextFormValue = {\r\n            ...formValue\r\n        };\r\n\r\n        if (path2obj) {\r\n            set(nextFormValue, name, value);\r\n        } else {\r\n            nextFormValue[name] = value;\r\n        }\r\n\r\n        if (!(\"formValue\" in this.props)) {\r\n            this.setState({\r\n                formValue: nextFormValue\r\n            });\r\n        }\r\n\r\n        if (onChange) {\r\n            onChange(nextFormValue);\r\n        }\r\n\r\n        if (cb) {\r\n            this._validateCb.push(formValue => {\r\n                cb(formValue);\r\n                // defer.resolve(formValue);\r\n            });\r\n        }\r\n\r\n        // return defer.promise;\r\n    }\r\n\r\n    setValues(obj = {}, cb) {\r\n        const { path2obj, onChange } = this.props;\r\n        const formValue = this.state.formValue;\r\n        // const defer = deferred();\r\n\r\n        const nextFormValue = {\r\n            ...formValue\r\n        };\r\n\r\n        Object.keys(obj).forEach(name => {\r\n            const value = obj[name];\r\n            if (path2obj) {\r\n                set(nextFormValue, name, value);\r\n            } else {\r\n                nextFormValue[name] = value;\r\n            }\r\n        });\r\n\r\n        if (!(\"formValue\" in this.props)) {\r\n            this.setState({\r\n                formValue: nextFormValue\r\n            });\r\n        }\r\n\r\n        if (onChange) {\r\n            onChange(nextFormValue);\r\n        }\r\n\r\n        if (cb) {\r\n            this._validateCb.push(formValue => {\r\n                cb(formValue);\r\n                // defer.resolve(formValue);\r\n            });\r\n        }\r\n\r\n        // return defer.promise;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const formValue = this.state.formValue;\r\n        const validateProcess = this._validateCb;\r\n        this._validateCb = [];\r\n        validateProcess.forEach(cb => {\r\n            cb(formValue);\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._validateCb = [];\r\n    }\r\n\r\n    hasError(name) {\r\n        const { formError } = this.state;\r\n\r\n        return formError[name] != null; // null or undefined\r\n    }\r\n\r\n    getError(name) {\r\n        const { formError } = this.state;\r\n        return formError[name];\r\n    }\r\n\r\n    cleanError(name) {\r\n        const { formError } = this.state;\r\n\r\n        if (!this.hasError(name)) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            formError: {\r\n                ...formError,\r\n                [name]: null\r\n            }\r\n        });\r\n    }\r\n\r\n    setError(name, message) {\r\n        const { formError } = this.state;\r\n        this.setState({\r\n            formError: {\r\n                ...formError,\r\n                [name]: message\r\n            }\r\n        });\r\n    }\r\n\r\n    cleanErrors() {\r\n        this.setState({\r\n            formError: {}\r\n        });\r\n    }\r\n\r\n    setErrors(errors) {\r\n        const { formError } = this.state;\r\n        this.setState({\r\n            ...formError,\r\n            ...errors\r\n        });\r\n    }\r\n\r\n    getFieldValidator(name) {\r\n        const fieldValidators = [];\r\n        this.fields\r\n            .filter(field => field.props.name === name)\r\n            .forEach(field => {\r\n                const fieldProps = field.props;\r\n                if (fieldProps.required) {\r\n                    fieldValidators.unshift(value => {\r\n                        if (isEmptyValue(value)) {\r\n                            return fieldProps.requiredMessage == null\r\n                                ? `${name} fails`\r\n                                : fieldProps.requiredMessage;\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (fieldProps.validator) {\r\n                    fieldValidators.push(\r\n                        ...(Array.isArray(fieldProps.validator)\r\n                            ? fieldProps.validator\r\n                            : [fieldProps.validator])\r\n                    );\r\n                }\r\n            });\r\n\r\n        const validator = this.props.validators[name];\r\n\r\n        if (validator) {\r\n            fieldValidators.push(\r\n                ...(Array.isArray(validator) ? validator : [validator])\r\n            );\r\n        }\r\n\r\n        return fieldValidators.filter(v => typeof v === \"function\");\r\n    }\r\n\r\n    isFieldValidating(name) {\r\n        const validatingFields = this.state.validatingFields;\r\n        return !!validatingFields[name];\r\n    }\r\n\r\n    isValidating() {\r\n        const validatingFields = this.state.validatingFields;\r\n        return Object.keys(validatingFields).some(key => validatingFields[key]);\r\n    }\r\n\r\n    _validateField(name, callback) {\r\n        callback = typeof callback === \"function\" ? callback : noop;\r\n        const { formValue } = this.state;\r\n        const value = this.getValue(name);\r\n        const validators = this.getFieldValidator(name);\r\n\r\n        if (!validators.length) {\r\n            callback(null, value);\r\n            return;\r\n        }\r\n\r\n        const cb = (errors = null) => {\r\n            if (errors === null && validators.length) {\r\n                startCheck();\r\n                return;\r\n            }\r\n\r\n            if (errors !== null) {\r\n                if (!Array.isArray(errors)) {\r\n                    errors = [errors];\r\n                }\r\n\r\n                errors = errors.map(error => {\r\n                    let message = error;\r\n\r\n                    if (error instanceof Error) {\r\n                        message = error.message;\r\n                    }\r\n\r\n                    return {\r\n                        name,\r\n                        message\r\n                    };\r\n                });\r\n            }\r\n\r\n            callback(errors, value);\r\n        };\r\n\r\n        //串行校验\r\n        const startCheck = () => {\r\n            const validator = validators.shift();\r\n\r\n            if (!validator) {\r\n                return; //check finish\r\n            }\r\n\r\n            const ret = validator(value, formValue);\r\n            if (ret === true) {\r\n                cb();\r\n            } else if (ret === false) {\r\n                cb(`${name} fails`);\r\n            } else if (ret && ret.then) {\r\n                //thenable\r\n                ret.then(() => cb(), e => cb(e));\r\n            } else {\r\n                cb(ret);\r\n            }\r\n        };\r\n\r\n        startCheck();\r\n    }\r\n\r\n    validateField(name, callback) {\r\n        callback = typeof callback === \"function\" ? callback : noop;\r\n\r\n        const { asyncTestDelay } = this.props;\r\n        const { formError, validatingFields } = this.state;\r\n\r\n        //是否异步探测\r\n        let asyncTimer = setTimeout(() => {\r\n            asyncTimer = null;\r\n            this.setState({\r\n                validatingFields: {\r\n                    ...validatingFields,\r\n                    [name]: true\r\n                }\r\n            });\r\n        }, asyncTestDelay);\r\n        // let isAsync = true;\r\n\r\n        this._validateField(name, (errors, value) => {\r\n            if (asyncTimer) {\r\n                clearTimeout(asyncTimer);\r\n            }\r\n            // isAsync = false;\r\n\r\n            this.setState(\r\n                {\r\n                    formError: {\r\n                        ...formError,\r\n                        [name]: errors ? errors[0].message : null\r\n                    },\r\n                    validatingFields: {\r\n                        ...validatingFields,\r\n                        [name]: false\r\n                    }\r\n                },\r\n                () => {\r\n                    callback(errors, value);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    validate(callback) {\r\n        callback = typeof callback === \"function\" ? callback : noop;\r\n\r\n        const { asyncTestDelay } = this.props;\r\n        const { formValue, formError } = this.state;\r\n        const fields = this.fields;\r\n        const validatingFields = {};\r\n        const allErrors = [];\r\n        let validCounter = 0;\r\n\r\n        const updateFormState = () => {\r\n            this.setState({\r\n                formError,\r\n                validatingFields\r\n            });\r\n        };\r\n\r\n        const complete = (errors, name) => {\r\n            validCounter--;\r\n\r\n            if (errors) {\r\n                formError[name] = errors[0].message;\r\n                allErrors.push(...errors);\r\n            }\r\n\r\n            if (validCounter <= 0) {\r\n                this.setState(\r\n                    {\r\n                        formError,\r\n                        validatingFields: {}\r\n                    },\r\n                    () => {\r\n                        callback(\r\n                            allErrors.length ? allErrors : null,\r\n                            formValue\r\n                        );\r\n                    }\r\n                );\r\n            }\r\n        };\r\n\r\n        if (fields.length) {\r\n            //包含多个异步校验的情况下只执行一次\r\n            let hasUpdate = false;\r\n            //校验初始化\r\n            fields.forEach(field => {\r\n                const name = field.props.name;\r\n                validCounter++;\r\n                validatingFields[name] = true;\r\n\r\n                if (!(name in formError)) {\r\n                    formError[name] = null;\r\n                }\r\n            });\r\n\r\n            //开始进行字段校验\r\n            fields.forEach(field => {\r\n                const name = field.props.name;\r\n\r\n                let isAsyncValidate = false;\r\n                //检测是否异步校验\r\n                let asyncTimer = setTimeout(() => {\r\n                    isAsyncValidate = true;\r\n                    asyncTimer = null;\r\n\r\n                    if (hasUpdate) return;\r\n                    hasUpdate = true;\r\n\r\n                    updateFormState();\r\n                }, asyncTestDelay);\r\n\r\n                this._validateField(name, errors => {\r\n                    validatingFields[name] = false;\r\n\r\n                    if (asyncTimer) {\r\n                        clearTimeout(asyncTimer);\r\n                        asyncTimer = null;\r\n                    }\r\n\r\n                    //异步校验完成后执行刷新动作\r\n                    if (isAsyncValidate) {\r\n                        updateFormState();\r\n                    }\r\n\r\n                    complete(errors, name);\r\n                });\r\n            });\r\n        } else {\r\n            callback(null, formValue);\r\n        }\r\n    }\r\n\r\n    validateAndScroll(callback) {\r\n        callback = typeof callback === \"function\" ? callback : noop;\r\n\r\n        this.validate((errors, formValue) => {\r\n            if (errors) {\r\n                const fields = this.fields;\r\n                for (let i = 0; i < fields.length; i++) {\r\n                    const field = fields[i];\r\n                    const name = field.props.name;\r\n                    if (this.hasError(name)) {\r\n                        const dom = field.getDOM();\r\n                        if (dom && dom.scrollIntoView) {\r\n                            dom.scrollIntoView();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            callback(errors, formValue);\r\n        });\r\n    }\r\n\r\n    getFormContext() {\r\n        return Object.create(this);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            prefixCls,\r\n            style,\r\n            className,\r\n            onSubmit,\r\n            component: Component,\r\n            children\r\n        } = this.props;\r\n\r\n        return (\r\n            <FormContext.Provider value={this.getFormContext()}>\r\n                <Component\r\n                    style={style}\r\n                    className={classnames(prefixCls, className)}\r\n                    onSubmit={onSubmit}\r\n                >\r\n                    {typeof children === \"function\" ? children(this) : children}\r\n                </Component>\r\n            </FormContext.Provider>\r\n        );\r\n    }\r\n}\r\n","export function isEmptyValue(value) {\r\n    if (value === undefined || value === null) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(value) && !value.length) {\r\n        return true;\r\n    }\r\n    if (typeof value === \"string\" && !value) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function deferred() {\r\n    const deferred = {};\r\n\r\n    deferred.promise = new Promise((resolve, reject) => {\r\n        deferred.resolve = resolve;\r\n        deferred.reject = reject;\r\n    });\r\n\r\n    return deferred;\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\nimport FormContext from \"./FormContext\";\r\nimport FormItemContext from \"./FormItemContext\";\r\n\r\nexport default class FormItem extends React.Component {\r\n    static contextType = FormContext;\r\n\r\n    static propTypes = {\r\n        children: PropTypes.oneOfType([PropTypes.func, PropTypes.node])\r\n            .isRequired,\r\n        name: PropTypes.string,\r\n        style: PropTypes.object,\r\n        className: PropTypes.string,\r\n        label: PropTypes.node,\r\n        labelFor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n        labelWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n        labelStyle: PropTypes.object,\r\n        labelClassName: PropTypes.string,\r\n        labelPosition: PropTypes.oneOf([\"top\", \"left\"]),\r\n        controlStyle: PropTypes.object,\r\n        controlClassName: PropTypes.string,\r\n        validator: PropTypes.oneOfType([PropTypes.func, PropTypes.array]),\r\n        required: PropTypes.bool,\r\n        requiredMessage: PropTypes.string,\r\n        clearErrorOnFocus: PropTypes.bool,\r\n        normalize: PropTypes.func,\r\n        renderExtra: PropTypes.func,\r\n        validateDelay: PropTypes.number,\r\n        validateTrigger: PropTypes.oneOf([\"blur\", \"change\"]),\r\n        inline: PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        prefixCls: \"nex-form-item\"\r\n        // requiredMessage: \"不能为空\"\r\n    };\r\n\r\n    constructor(...args) {\r\n        super(...args);\r\n        const form = this.context;\r\n\r\n        form.addField(this);\r\n    }\r\n\r\n    saveDOM = dom => {\r\n        this._dom = dom;\r\n    };\r\n\r\n    getDOM() {\r\n        return this._dom;\r\n    }\r\n\r\n    getForm() {\r\n        return this.context;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const form = this.context;\r\n        form.removeField(this);\r\n    }\r\n\r\n    _validateTimer = null;\r\n\r\n    hasValidateTrigger(type = \"none\") {\r\n        let triggers = this.getProp(\"validateTrigger\", []);\r\n\r\n        triggers = Array.isArray(triggers) ? triggers : [triggers];\r\n\r\n        return triggers.indexOf(type) !== -1;\r\n    }\r\n\r\n    getValidateDelay() {\r\n        const form = this.context;\r\n        const { validateDelay } = form.props;\r\n        const props = this.props;\r\n\r\n        return \"validateDelay\" in props ? props.validateDelay : validateDelay;\r\n    }\r\n\r\n    hasError() {\r\n        const form = this.context;\r\n        const { name } = this.props;\r\n\r\n        return form.hasError(name);\r\n    }\r\n\r\n    getError() {\r\n        const form = this.context;\r\n        const { name } = this.props;\r\n\r\n        return form.getError(name);\r\n    }\r\n\r\n    cleanError() {\r\n        const form = this.context;\r\n        const { name } = this.props;\r\n\r\n        return form.cleanError(name);\r\n    }\r\n\r\n    setError(message) {\r\n        const form = this.context;\r\n        const { name } = this.props;\r\n\r\n        return form.setError(name, message);\r\n    }\r\n\r\n    isValidating() {\r\n        const form = this.context;\r\n        const { name } = this.props;\r\n\r\n        return form.isFieldValidating(name);\r\n    }\r\n\r\n    validate(callback) {\r\n        const form = this.context;\r\n        const { name } = this.props;\r\n\r\n        form.validateField(name, callback);\r\n    }\r\n\r\n    getValue() {\r\n        const form = this.context;\r\n        const { name } = this.props;\r\n\r\n        return form.getValue(name);\r\n    }\r\n\r\n    setValue(value, callback) {\r\n        const form = this.context;\r\n        const { name } = this.props;\r\n\r\n        form.setValue(name, value, callback);\r\n    }\r\n\r\n    triggerValidate() {\r\n        const validateDelay = this.getValidateDelay();\r\n\r\n        if (validateDelay > 0) {\r\n            if (this._validateTimer) clearTimeout(this._validateTimer);\r\n            this._validateTimer = setTimeout(() => {\r\n                this.validate();\r\n            }, validateDelay);\r\n        } else {\r\n            this.validate();\r\n        }\r\n    }\r\n\r\n    handleChange = (value, callback) => {\r\n        const { name } = this.props;\r\n        this.setValue(value, formValue => {\r\n            if (formValue[name] /*newValue*/ === value /*oldValue*/) return;\r\n\r\n            callback && callback();\r\n\r\n            if (this.hasValidateTrigger(\"change\")) {\r\n                this.triggerValidate();\r\n            }\r\n        });\r\n    };\r\n\r\n    handleFocus = callback => {\r\n        const clearErrorOnFocus = this.getProp(\"clearErrorOnFocus\");\r\n        callback && callback();\r\n\r\n        if (clearErrorOnFocus) {\r\n            if (this._validateTimer) clearTimeout(this._validateTimer);\r\n            this.cleanError();\r\n        }\r\n    };\r\n\r\n    handleBlur = callback => {\r\n        callback && callback();\r\n\r\n        if (this.hasValidateTrigger(\"blur\")) {\r\n            this.triggerValidate();\r\n        }\r\n    };\r\n\r\n    normalizeChildrenProps() {\r\n        let { normalize, name, onChange, onFocus, onBlur } = this.props;\r\n\r\n        const getInputProps = this.getFormProps(\"getInputProps\", () => ({}));\r\n\r\n        const customProps = getInputProps(this, name);\r\n\r\n        return {\r\n            value: this.getValue(),\r\n            ...customProps,\r\n            onChange: value => {\r\n                if (normalize) {\r\n                    value = normalize(value);\r\n                }\r\n\r\n                this.handleChange(value, () => {\r\n                    onChange && onChange(value);\r\n                    customProps.onChange && customProps.onChange(value);\r\n                });\r\n            },\r\n            onFocus: e => {\r\n                this.handleFocus(() => {\r\n                    onFocus && onFocus(e);\r\n                    customProps.onFocus && customProps.onFocus(e);\r\n                });\r\n            },\r\n            onBlur: e => {\r\n                this.handleBlur(() => {\r\n                    onBlur && onBlur(e);\r\n                    customProps.onBlur && customProps.onBlur(e);\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    normalizeChildren() {\r\n        return React.cloneElement(\r\n            React.Children.only(this.props.children),\r\n            this.normalizeChildrenProps()\r\n        );\r\n    }\r\n\r\n    getFormProps(prop, defaultValue) {\r\n        const form = this.context;\r\n        const formProps = form.props;\r\n\r\n        return formProps[prop] || defaultValue;\r\n    }\r\n\r\n    getProp(prop, defaultValue) {\r\n        const form = this.context;\r\n        const formProps = form.props;\r\n        const props = this.props;\r\n\r\n        return prop in props ? props[prop] : formProps[prop] || defaultValue;\r\n    }\r\n\r\n    getFormItemContext() {\r\n        return Object.create(this);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            name,\r\n            label,\r\n            required,\r\n            className,\r\n            prefixCls,\r\n            style,\r\n            renderExtra,\r\n            children\r\n        } = this.props;\r\n        const inline = this.getProp(\"inline\");\r\n        const labelPosition = this.getProp(\"labelPosition\");\r\n        const renderFieldExtra = this.getFormProps(\"renderFieldExtra\");\r\n        const renderControlExtra = () => {\r\n            if (renderExtra) {\r\n                return renderExtra(this);\r\n            }\r\n\r\n            if (renderFieldExtra) {\r\n                return renderFieldExtra(this, name);\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        const hasError = this.hasError();\r\n        const isValidating = this.isValidating();\r\n\r\n        const child =\r\n            typeof children === \"function\"\r\n                ? children(this.normalizeChildrenProps(), this)\r\n                : this.normalizeChildren();\r\n\r\n        return (\r\n            <FormItemContext.Provider value={this.getFormItemContext()}>\r\n                <div\r\n                    style={style}\r\n                    ref={this.saveDOM}\r\n                    className={classnames(prefixCls, {\r\n                        [`${prefixCls}-inline`]: inline,\r\n                        [`${prefixCls}-${labelPosition}`]: labelPosition,\r\n                        [`has-error`]: hasError,\r\n                        [`is-validating`]: isValidating,\r\n                        [`is-required`]: required,\r\n                        [`${className}`]: className\r\n                    })}\r\n                >\r\n                    {label && (\r\n                        <label\r\n                            htmlFor={this.getProp(\"labelFor\")}\r\n                            className={classnames(\r\n                                `${prefixCls}-label`,\r\n                                this.getProp(\"labelClassName\")\r\n                            )}\r\n                            style={{\r\n                                width: this.getProp(\"labelWidth\"),\r\n                                ...this.getProp(\"labelStyle\", {})\r\n                            }}\r\n                        >\r\n                            {label}\r\n                        </label>\r\n                    )}\r\n                    <div\r\n                        className={classnames(\r\n                            `${prefixCls}-control`,\r\n                            this.getProp(\"controlClassName\")\r\n                        )}\r\n                        style={this.getProp(\"controlStyle\", {})}\r\n                    >\r\n                        {child}\r\n                        {renderControlExtra()}\r\n                    </div>\r\n                </div>\r\n            </FormItemContext.Provider>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function NativeInput(props) {\r\n    const {\r\n        component: Component = \"input\",\r\n        value,\r\n        inputRef,\r\n        onChange,\r\n        ...others\r\n    } = props;\r\n\r\n    const onInputChange = e => {\r\n        const value = e.target.value;\r\n        onChange && onChange(value, e);\r\n    };\r\n\r\n    return (\r\n        <Component\r\n            ref={inputRef}\r\n            onChange={onInputChange}\r\n            value={value}\r\n            {...others}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport FormContext from \"./FormContext\";\r\n\r\nexport default () => {\r\n    return React.useContext(FormContext);\r\n};\r\n","import React from \"react\";\r\nimport FormItemContext from \"./FormItemContext\";\r\n\r\nexport default () => {\r\n    return React.useContext(FormItemContext);\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Form, FormItem, NativeInput } from \"../../src/index\";\r\n\r\nfunction Input(props) {\r\n    return (\r\n        <NativeInput\r\n            {...props}\r\n            className=\"\"\r\n            type=\"text\"\r\n            style={{\r\n                height: 32,\r\n                padding: \"4px 7px\"\r\n            }}\r\n            component=\"input\"\r\n        />\r\n    );\r\n}\r\n\r\nexport default class DEMO extends Component {\r\n    state = {\r\n        formValue: {\r\n            name: \"\",\r\n            info: {\r\n                gender: \"男\"\r\n            }\r\n        }\r\n    };\r\n\r\n    reset = e => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            formValue: {\r\n                name: \"haha\",\r\n                info: {\r\n                    gender: \"男\"\r\n                }\r\n            }\r\n        });\r\n\r\n        this.form.cleanErrors();\r\n    };\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (this.form) {\r\n            this.form.validateAndScroll(errors => {\r\n                console.log(errors);\r\n            });\r\n        }\r\n    };\r\n\r\n    getRules() {\r\n        return {\r\n            \"info.address\": function() {\r\n                return false;\r\n            },\r\n            name: function(value) {\r\n                return value === \"\" ? \"不能为空\" : true;\r\n            }\r\n        };\r\n    }\r\n\r\n    renderFieldExtra = component => {\r\n        return (\r\n            <div\r\n                style={{\r\n                    color: \"red\",\r\n                    top: \"100%\"\r\n                }}\r\n            >\r\n                {component.isValidating() ? \"校验中...\" : component.getError()}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const { formValue } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Form\r\n                    getDefaultFieldValue={() => \"\"}\r\n                    ref={form => (this.form = form)}\r\n                    formValue={formValue}\r\n                    validators={this.getRules()}\r\n                    onChange={formValue => this.setState({ formValue })}\r\n                    onSubmit={this.onSubmit}\r\n                    renderFieldExtra={this.renderFieldExtra}\r\n                    validateTrigger=\"blur\"\r\n                    inline\r\n                >\r\n                    {form => {\r\n                        return (\r\n                            <div>\r\n                                <FormItem\r\n                                    labelFor=\"12\"\r\n                                    name=\"goods\"\r\n                                    validateTrigger=\"change\"\r\n                                    required\r\n                                    label=\"姓名\"\r\n                                    inline\r\n                                >\r\n                                    <Input />\r\n                                </FormItem>\r\n                                <FormItem name=\"name\" label=\"姓名\" inline>\r\n                                    <Input />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    help=\"必填选项\"\r\n                                    name=\"name\"\r\n                                    label=\"姓名\"\r\n                                    inline\r\n                                >\r\n                                    <Input />\r\n                                </FormItem>\r\n                                <FormItem name=\"name\" label=\"姓名\" inline>\r\n                                    <Input size=\"small\" />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    labelWidth={100}\r\n                                    name=\"name\"\r\n                                    label=\"姓名\"\r\n                                >\r\n                                    <Input />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    name=\"name\"\r\n                                    labelWidth={100}\r\n                                    label=\"姓名\"\r\n                                    inline\r\n                                >\r\n                                    <Input />\r\n                                </FormItem>\r\n                                <FormItem name=\"name\" label=\"姓名\" inline>\r\n                                    <Input />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    name=\"name\"\r\n                                    labelPosition=\"top\"\r\n                                    label=\"姓名\"\r\n                                >\r\n                                    <Input />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    name=\"name\"\r\n                                    labelPosition=\"top\"\r\n                                    label=\"姓名\"\r\n                                    inline\r\n                                >\r\n                                    <Input />\r\n                                </FormItem>\r\n                                <FormItem name=\"name\" label=\"姓名\">\r\n                                    <NativeInput component=\"input\" />\r\n                                </FormItem>\r\n                                <div>\r\n                                    {form.isFieldValidating(\"name\")\r\n                                        ? \"数据校验中...\"\r\n                                        : null}\r\n                                </div>\r\n                                <FormItem name=\"info.gender\" label=\"性别\">\r\n                                    <NativeInput component=\"input\" />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    name=\"info.age\"\r\n                                    label=\"年龄\"\r\n                                    normalize={v => parseInt(v) || \"\"}\r\n                                >\r\n                                    <NativeInput component=\"input\" />\r\n                                </FormItem>\r\n                                <FormItem name=\"info.address\" label=\"地址\">\r\n                                    <NativeInput component=\"input\" />\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    name=\"info.list[0]\"\r\n                                    label=\"L1\"\r\n                                    validator={value => {\r\n                                        return new Promise(\r\n                                            (resolve, reject) => {\r\n                                                setTimeout(\r\n                                                    value\r\n                                                        ? resolve\r\n                                                        : () =>\r\n                                                              reject(\r\n                                                                  \"校验失败\"\r\n                                                              ),\r\n                                                    2000\r\n                                                );\r\n                                            }\r\n                                        );\r\n                                    }}\r\n                                >\r\n                                    <NativeInput component=\"input\" />\r\n                                </FormItem>\r\n                                <div>\r\n                                    {form.isFieldValidating(\"info.list[0]\")\r\n                                        ? \"数据校验中...\"\r\n                                        : null}\r\n                                </div>\r\n                                <FormItem\r\n                                    name=\"info.list[1]\"\r\n                                    label=\"L2\"\r\n                                    validator={value => {\r\n                                        return new Promise(\r\n                                            (resolve, reject) => {\r\n                                                setTimeout(\r\n                                                    value\r\n                                                        ? resolve\r\n                                                        : () =>\r\n                                                              reject(\r\n                                                                  \"校验失败\"\r\n                                                              ),\r\n                                                    1000\r\n                                                );\r\n                                            }\r\n                                        );\r\n                                    }}\r\n                                >\r\n                                    <NativeInput component=\"input\" />\r\n                                </FormItem>\r\n                                <div>\r\n                                    {form.isFieldValidating(\"info.list[1]\")\r\n                                        ? \"数据校验中...\"\r\n                                        : null}\r\n                                </div>\r\n                                <FormItem name=\"info.country\" label=\"国籍\">\r\n                                    <NativeInput component=\"select\">\r\n                                        <option value=\"中国\">中国</option>\r\n                                        <option value=\"美国\">美国</option>\r\n                                        <option value=\"澳大利亚\">\r\n                                            澳大利亚\r\n                                        </option>\r\n                                    </NativeInput>\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    name=\"info.desc\"\r\n                                    label=\"备注\"\r\n                                    alignItems=\"top\"\r\n                                >\r\n                                    <NativeInput component=\"textarea\" />\r\n                                </FormItem>\r\n                                {form.isValidating() ? \"表单校验中...\" : null}\r\n                                <pre>{JSON.stringify(formValue)}</pre>\r\n                                <pre>{JSON.stringify(form.getError())}</pre>\r\n                                <button>submit</button>\r\n                                <button onClick={this.reset}>reset</button>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default React.createContext({});\r\n","import React from \"react\";\r\n\r\nexport default React.createContext({});\r\n"],"sourceRoot":""}